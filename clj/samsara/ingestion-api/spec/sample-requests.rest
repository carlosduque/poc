# -*- restclient -*-

#
# Here some sample requests which can
# be used with emacs restclient-mode
# to test the ingestion-api.
#

#
# General vars
#
:host := "localhost"
:timestamp := (concat (format-time-string "%s") "000")

#
# publish some events
#
POST http://:host:9000/v1/events
Content-Type: application/json
X-Samsara-publishedTimestamp: :timestamp
[
  {
    "timestamp": :timestamp,
    "sourceId": "3aw4sedrtcyvgbuhjkn",
    "eventName": "user.item.added",
    "page": "orders",
    "item": "sku-1234"
  }, {
    "timestamp": :timestamp,
    "sourceId": "3aw4sedrtcyvgbuhjkn",
    "eventName": "user.item.removed",
    "page": "orders",
    "item": "sku-5433",
    "action": "remove"
  }
]


#
# check the api-status
# returns:
#   - 200 when api is only
#   - 503 when api is offline
#
GET http://:host:9000/v1/api-status


#
# set the api-status to offline
# This should NOT be allowed on the
# public endpoint but only on the
# admin port
#
PUT http://:host:9000/v1/api-status
Content-Type: application/json

{ "status": "offline" }


################################################################################
#                          H T T P   A D M I N
################################################################################

#
# check the api-status
# returns:
#   - 200 when api is only
#   - 503 when api is offline
#
GET http://:host:9010/v1/api-status


#
# set the api-status to offline
# This should NOT be allowed on the
# public endpoint but only on the
# admin port
#
PUT http://:host:9010/v1/api-status
Content-Type: application/json

{ "status": "offline" }


#
# set the api-status to online
#
PUT http://:host:9010/v1/api-status
Content-Type: application/json

{ "status": "online" }


################################################################################
#                                ERROR HANDLING
################################################################################

#
# Post events will only accept json or json+zip
# in any other case a 400 shoule be returned
#
POST http://:host:9000/v1/events
Content-Type: application/x-www-form-urlencoded

timestamp=123456789012&eventName=wrong&sourceId=3aw4sedrtcyvgbuhjkn


#
# publish some events, one of which isn't valid
#
POST http://:host:9000/v1/events
Content-Type: application/json

[
  {
    "timestamp": :timestamp,
    "sourceId": "3aw4sedrtcyvgbuhjkn",
    "eventNameWrong": "user.clicked",
    "page": "orders",
    "item": "sku-1234"
  }, {
    "timestamp": :timestamp,
    "sourceId": "3aw4sedrtcyvgbuhjkn",
    "eventName": "user.clicked",
    "page": "orders",
    "item": "sku-5433",
    "action": "remove"
  }
]


#
# publish some events without publishedTimestamp
#
POST http://:host:9000/v1/events
Content-Type: application/json
[
  {
    "timestamp": :timestamp,
    "sourceId": "3aw4sedrtcyvgbuhjkn",
    "eventName": "user.item.added",
    "page": "orders",
    "item": "sku-1234"
  }, {
    "timestamp": :timestamp,
    "sourceId": "3aw4sedrtcyvgbuhjkn",
    "eventName": "user.item.removed",
    "page": "orders",
    "item": "sku-5433",
    "action": "remove"
  }
]
